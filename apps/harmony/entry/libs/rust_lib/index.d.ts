/* auto-generated by NAPI-RS-OHOS */
/* eslint-disable */
/** 原生平台的相关配置 */
export interface AppConfig {
  version: string
  env: string
  userId: string
}

/** 日志输入 */
export interface AppLog {
  level: AppLogLevel
  tag: string
  message: string
}

export declare const enum AppLogLevel {
  Verbose = 0,
  Debug = 1,
  Info = 2,
  Warn = 3,
  Error = 4
}

export interface Input {
  left: number
  right: number
}

export interface Output {
  result: number
}

export interface VersionInfoRequestModel {
  strParam: string
  intParam: number
}

export interface VersionInfoResponseModel {
  versionName: string
  versionCode: number
}

export declare function add(left: number, right: number): number

export declare function addInput(input: Input): Output

export declare function asyncAdd(left: number, right: number): Promise<number>

export declare function asyncMinus(left: number, right: number): Promise<number>

/** 同步回调，即rust调用js/ts/arkts的同步函数，带复杂入参 */
export declare function getVersionInfo(jsFunction: (arg: VersionInfoRequestModel) => VersionInfoResponseModel): VersionInfoResponseModel

/** 异步回调，即rust调用js/ts/arkts的异步函数，带复杂出参 */
export declare function getVersionInfoAsync(jsPromise: Promise<VersionInfoResponseModel>): Promise<VersionInfoResponseModel>

/** 异步回调获取version_info，即rust调用js/ts/arkts的异步函数，带复杂入参和出参 */
export declare function getVersionInfoAsyncWithInput(tsfn: (err: Error | null, arg: VersionInfoRequestModel) => Promise<VersionInfoResponseModel>): Promise<VersionInfoResponseModel>

/** 同步回调，即rust调用js/ts/arkts的同步函数，带String入参 */
export declare function getVersionName(jsFunction: (arg: string) => string): string

/** 异步回调，即rust调用js/ts/arkts的异步函数，无入参 */
export declare function getVersionNameAsync(jsPromise: Promise<string>): Promise<string>

/**
  * 原生注册
  * * `app_config_fn` 获取原生平台的相关配置
  * * `current_page_fn` 获取当前页面（字符串形式）
  * * `log_func` 打印日志
  * * `system_time_fn` 获取格式化后的系统时间
  */
export declare function register(appConfigFn: (err: Error | null, ) => Promise<AppConfig>, currentPageFn: (err: Error | null, ) => Promise<string>, logFn: (err: Error | null, arg: AppLog) => Promise<undefined>, systemTimeFn: (err: Error | null, ) => Promise<string>): Promise<void>

